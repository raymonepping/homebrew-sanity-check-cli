#!/usr/bin/env bash
set -euo pipefail

# --- Version & CLI Info ---
# shellcheck disable=SC2034
VERSION="1.1.5"
CLI_NAME="sanity-check-cli"
CONFIG_FILE=""
MODE="all"

REPORT=false
FRESH_REPORT=false
REPORT_FILE="sanity_check.md"

MISSING_TOOL_WARNINGS=()
PROBLEM_FILES=()

# shellcheck disable=SC2034  # QUIET is intentionally global for submodules
QUIET=false
export QUIET=false

# --- Homebrew-aware LIB/TPL lookup ---
HOMEBREW_PREFIX="$(brew --prefix 2>/dev/null || true)"
POSSIBLE_LIB_DIRS=(
  "$HOMEBREW_PREFIX/share/$CLI_NAME/lib"
  "$HOMEBREW_PREFIX/opt/$CLI_NAME/share/$CLI_NAME/lib"
  "./lib"
)
POSSIBLE_TPL_DIRS=(
  "$HOMEBREW_PREFIX/share/$CLI_NAME/tpl"
  "$HOMEBREW_PREFIX/opt/$CLI_NAME/share/$CLI_NAME/tpl"
  "./tpl"
)
LIB_DIR=""
for d in "${POSSIBLE_LIB_DIRS[@]}"; do
  [[ -d "$d" ]] && LIB_DIR="$d" && break
done
[[ -z "$LIB_DIR" ]] && echo "‚ùå Could not locate lib/ directory." && exit 1

TPL_DIR=""
for d in "${POSSIBLE_TPL_DIRS[@]}"; do
  [[ -d "$d" ]] && TPL_DIR="$d" && break
done
[[ -z "$TPL_DIR" ]] && echo "‚ùå Could not locate tpl/ directory." && exit 1

# shellcheck disable=SC2034
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# --- Load utilities and submodules ---

# shellcheck disable=SC1091
source "$LIB_DIR/sanity_utils.sh"

# shellcheck disable=SC1091
source "$LIB_DIR/check_router.sh"

# shellcheck disable=SC1091
source "$LIB_DIR/tool_versions.sh"

# --- Find config ---
DEFAULT_CONFIG_LOCATIONS=(
  "$HOME/.sanity.config.json"
  "$HOME/.config/sanity_check/.sanity.config.json"
  "./.sanity.config.json"
)
for c in "${DEFAULT_CONFIG_LOCATIONS[@]}"; do
  [[ -f "$c" ]] && CONFIG_FILE="$c" && break
done

# --- Parse CLI Arguments ---
FILES=()
while [[ $# -gt 0 ]]; do
  case "$1" in
  --fix)
    MODE="fix"
    shift
    ;;
  --lint)
    MODE="lint"
    shift
    ;;
  --quiet)
    QUIET=true
    shift
    ;;
  --file)
    FILES+=("$2")
    shift 2
    ;;
  --config)
    CONFIG_FILE="$2"
    shift 2
    ;;
  --tools)
    # echo "$CLI_NAME v$VERSION"
    print_all_tool_versions
    exit 0
    ;;
  --report) REPORT=true; shift ;;
  --fresh-report) FRESH_REPORT=true; REPORT=true; shift ;;    
  --version)
    echo "$CLI_NAME v$VERSION"
    exit 0
    ;;
  --help)
    cat <<EOF
üß™ $CLI_NAME v$VERSION

USAGE:
  $0 [OPTIONS] [FILE ...]

OPTIONS:
  --fix                   Format/auto-fix supported files (sh, py, js, tf, Dockerfile, etc)
  --lint                  Lint supported files (shellcheck, flake8, eslint, tflint, etc)
  --file FILE             Specify file(s) to check (may repeat or use globs)
  --config CONFIG         Use a custom .sanity.config.json
  --tools                 Show toolchain versions (python, terraform, node, etc)
  --report                Generate a Markdown report
  --fresh-report          Start a fresh Markdown report
  --version               Show $CLI_NAME version only
  --quiet                 Suppress all non-error output
  --help                  Show this help message

EXAMPLES:
  $0 --lint --file main.py --file Dockerfile
  $0 --fix
  $0 --tools

If no files are specified, $CLI_NAME will search the current folder recursively for supported files.

EOF
    exit 0
    ;;
  *)
    FILES+=("$1")
    shift
    ;;
  esac
done

# --- Fresh report? ---
if [[ "$FRESH_REPORT" == true ]]; then
  echo "üßº Fresh report started on $(date)" >"$REPORT_FILE"
fi

# --- Print config summary ---
if [[ -z "$CONFIG_FILE" || ! -f "$CONFIG_FILE" ]]; then
  echo "‚ö†Ô∏è  No valid config file found. Proceeding with default tool set."
else
  echo "‚úÖ Using config: $CONFIG_FILE"
fi

# --- File discovery ---
if [[ ${#FILES[@]} -eq 0 ]]; then
  mapfile -t FILES < <(find . -type f \( -name "*.sh" -o -name "*.py" -o -name "*.js" -o -name "*.ts" -o -name "*.tf" -o -name "*.hcl" -o -name "Dockerfile" -o -name "*.yml" -o -name "*.yaml" \))
fi

echo "üîç Running sanity check on ${#FILES[@]} file(s)..."
for file in "${FILES[@]}"; do
  route_file_check "$file" "$MODE"
done

# --- Reporting ---
if [[ "$REPORT" == true || ${#MISSING_TOOL_WARNINGS[@]} -gt 0 || ${#PROBLEM_FILES[@]} -gt 0 ]]; then
  render_markdown_report "$REPORT_FILE"
fi

echo "‚úÖ Sanity check complete."
exit 0
